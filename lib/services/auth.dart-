import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:yarytefit/domain/user.dart';
import 'package:yarytefit/domain/myuser.dart';

class AuthService{
  final FirebaseAuth _fAuth = FirebaseAuth.instance;
final CollectionReference _userDataCollection = FirebaseFirestore.instance.collection("userData");

  Future<User> signInWithEmailAndPassword(String email, String password) async {
    try{
      AuthResult result = await _fAuth.signInWithEmailAndPassword(email: email, password: password);
      User firebaseUser = result.user;
      var user =  User.fromFirebase(firebaseUser);
      return user;
    }catch(e){
      return null;
    }
  }

  Future<User> registerWithEmailAndPassword(String email, String password) async {
    try{
      AuthResult result = await _fAuth.createUserWithEmailAndPassword(email: email, password: password);
      User firebaseUser = result.user;
      var user = User.fromFirebase(firebaseUser);

      var userData = UserData();
      await _userDataCollection.doc(user.id).set(userData.toMap());

      return user;
    }catch(e){
      print(e);
      return null;
    }
  }

  Future logOut() async {
    await _fAuth.signOut();
  }

  Stream<User> get currentUser {
    return _fAuth.onAuthStateChanged
      .map((User user) => user != null
        ? User.fromFirebase(user)
        : null);
  }

  Stream<User> getCurrentUserWithData(User user){
    return _userDataCollection.doc(user.uid).snapshots().map((snapshot)
    {
      if(snapshot?.data == null) return null;

      var userData = UserData.fromJson(snapshot.id, snapshot.data());
      user.setUserData(userData);
      return user;
    });
  }
  
}

class AuthService1 {
  final FirebaseAuth _fAuth = FirebaseAuth.instance;
final CollectionReference _userDataCollection = FirebaseFirestore.instance.collection("userData");

  Future<MyUser?> signInWithEmailAndPassword(
      String email, String password) async {
    try {
      UserCredential result = await _fAuth.signInWithEmailAndPassword(
          email: email, password: password);
      User? user = result.user;
      return MyUser.fromFirebase(user!);
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        debugPrint('No user found for that email.');
      } else if (e.code == 'wrong-password') {
        debugPrint('Wrong password provided for that user.');
      }
      return null;
    }
  }

  Future<MyUser?> registerInWithEmailAndPassword(
      String email, String password) async {
    try {
      UserCredential result = await _fAuth.createUserWithEmailAndPassword(
          email: email, password: password);
      User? user = result.user;
      return MyUser.fromFirebase(user!);
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        debugPrint('No user found for that email.');
      } else if (e.code == 'wrong-password') {
        debugPrint('Wrong password provided for that user.');
      }
      return null;
    }
  }

  Future logOut() async {
    await _fAuth.signOut();
  }

Stream<MyUser?> get currentUser  {
  //return _fAuth.authStateChanges().map(_userFromFirebase as MyUser Function(User? event));
return _fAuth.authStateChanges().map((User? user) => 
user != null ? MyUser.fromFirebase(user):null);
}

}
